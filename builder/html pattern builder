// builder function
// simple objects can be created in single constructor
// piecewise object construction of the api to make them work well
package main

import (
	"fmt"
	"strings"
)

type HtmlElement struct {
	name, text string
	elements   []HtmlElement // these are the other elements which we have to use
}

const (
	indentsize = 2
)

func (e *HtmlElement) String() string {
	return e.string(0)
}

func (e *HtmlElement) string(indent int) string {
	sb := strings.Builder{}
	i := strings.Repeat("", indentsize*indent)
	sb.WriteString(fmt.Sprintf("%s <%s>\n", i, e.name))
	if len(e.text) > 0 {
		sb.WriteString(strings.Repeat("", indentsize*(indent+1)))
		sb.WriteString(e.text)
		sb.WriteString("/n")
	}

	for _, el := range e.elements {
		sb.WriteString(el.string(indent + 1))
	}
	sb.WriteString(fmt.Sprintf("%s <%s>\n", i, e.name))
	return sb.String()
}

type HtmlBuilder struct {
	rootName string
	root     HtmlElement
}

func NewHtmlBuilder(rootName string) *HtmlBuilder {
	return &HtmlBuilder{rootName,
		HtmlElement{rootName, "", []HtmlElement{}}}
}

// utility method to work on this
// string representation
func (b *HtmlBuilder) String() string {
	return b.root.String()
}

func (b *HtmlBuilder) AddChild(
	childname, childtext string) {
	e := HtmlElement{childname, childtext, []HtmlElement{}}
	b.root.elements = append(b.root.elements, e)
}
func main() {

	b := NewHtmlBuilder(("UL"))
	b.AddChild("li", "hello")
	b.AddChild("li", "World")
	fmt.Println(b.String())

}
 
